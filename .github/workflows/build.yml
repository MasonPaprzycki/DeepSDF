name: DeepSDF Build

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: true

    # --------------------
    # macOS setup (venv, setuptools, glew, zlib)
    # --------------------
    - name: Setup macOS Python and dependencies
      if: runner.os == 'macOS'
      shell: bash
      run: |
        set -euo pipefail

        # Homebrew deps
        brew update
        brew install glew zlib

        # create venv and install python packages inside it
        python3 -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install numpy matplotlib tqdm

        # compute python exe and site-packages dynamically (stable quoting)
        PYTHON_EXE="$(pwd)/venv/bin/python"
        PY_SITE="$($PYTHON_EXE -c 'import sysconfig; print(sysconfig.get_paths()[\"purelib\"])')"

        # export variables for subsequent steps
        echo "PATH=$(pwd)/venv/bin:$PATH" >> $GITHUB_ENV
        echo "PYTHON_EXECUTABLE=$PYTHON_EXE" >> $GITHUB_ENV
        echo "PYTHONPATH=$PY_SITE" >> $GITHUB_ENV

    # --------------------
    # Windows setup (vcpkg + GLEW + python deps)
    # --------------------
    - name: Install vcpkg and GLEW on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        .\bootstrap-vcpkg.bat
        .\vcpkg install glew:x64-windows

        # persist the toolchain file
        Add-Content -Path $env:GITHUB_ENV -Value "CMAKE_TOOLCHAIN_FILE=${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake"

    - name: Ensure Windows Python packages and export PY info
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install numpy matplotlib tqdm

        $pyExe = (Get-Command python).Source
        # capture site-packages via python, PowerShell-friendly
        $pySite = & python -c "import sysconfig; print(sysconfig.get_paths()['purelib'])"
        Add-Content -Path $env:GITHUB_ENV -Value "PYTHON_EXECUTABLE=$pyExe"
        Add-Content -Path $env:GITHUB_ENV -Value "PYTHONPATH=$pySite"

    # --------------------
    # Set up CMake
    # --------------------
    - name: Set up CMake
      uses: jwlawson/actions-setup-cmake@v1

    # --------------------
    # Configure CMake (macOS)
    # --------------------
    - name: Configure CMake (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        set -euo pipefail
        cmake -S . -B build -DCMAKE_BUILD_TYPE=Release \
              -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE} \
              -DCMAKE_VERBOSE_MAKEFILE=ON

    # --------------------
    # Configure CMake (Windows)
    # --------------------
    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $args = "-S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE=ON"
        if ($env:CMAKE_TOOLCHAIN_FILE) {
          $args = "$args -DCMAKE_TOOLCHAIN_FILE=$env:CMAKE_TOOLCHAIN_FILE"
        }
        if ($env:PYTHON_EXECUTABLE) {
          $args = "$args -DPYTHON_EXECUTABLE=$env:PYTHON_EXECUTABLE"
        }
        cmake $args

    # --------------------
    # Build Pangolin first (isolate failures)
    # --------------------
    - name: Build Pangolin (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        set -euo pipefail
        cmake --build build --config Release --target pangolin_proj -- -j 2 VERBOSE=1

    - name: Build Pangolin (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        cmake --build build --config Release --target pangolin_proj

    # --------------------
    # Build remaining targets (verbose)
    # --------------------
    - name: Build remaining targets (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        set -euo pipefail
        cmake --build build --config Release -- -j 2 VERBOSE=1

    - name: Build remaining targets (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        cmake --build build --config Release
