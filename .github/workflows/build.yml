name: DeepSDF Build

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    steps:
    # --------------------
    # Checkout repository
    # --------------------
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: true

    # --------------------
    # macOS dependencies
    # --------------------
    - name: Setup macOS Python and dependencies
      if: runner.os == 'macOS'
      shell: bash
      run: |
        # Install brew dependencies
        brew update
        brew install glew zlib

        # Create and activate Python virtual environment
        python3 -m venv venv
        source venv/bin/activate

        # Upgrade pip and install required Python packages inside venv
        python -m pip install --upgrade pip setuptools wheel --break-system-packages
        python -m pip install numpy matplotlib tqdm

        # Prepend venv to PATH so ExternalProject sees venv Python
        export PATH="$(pwd)/venv/bin:$PATH"

    # --------------------
    # Windows dependencies (vcpkg + GLEW)
    # --------------------
    - name: Install vcpkg and GLEW on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        .\bootstrap-vcpkg.bat
        .\vcpkg install glew:x64-windows
        echo "CMAKE_TOOLCHAIN_FILE=${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake" >> $env:GITHUB_ENV

    # --------------------
    # Set up CMake
    # --------------------
    - name: Set up CMake
      uses: jwlawson/actions-setup-cmake@v1

    # --------------------
    # Configure CMake (macOS)
    # --------------------
    - name: Configure CMake (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        source venv/bin/activate
        export PATH="$(pwd)/venv/bin:$PATH"
        cmake -S . -B build -DCMAKE_BUILD_TYPE=Release \
              -DPYTHON_EXECUTABLE=$(which python)

    # --------------------
    # Configure CMake (Windows)
    # --------------------
    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        cmake -S . -B build -DCMAKE_BUILD_TYPE=Release `
              ${env:CMAKE_TOOLCHAIN_FILE:+-DCMAKE_TOOLCHAIN_FILE=${env:CMAKE_TOOLCHAIN_FILE}}

    # --------------------
    # Build
    # --------------------
    - name: Build
      shell: bash
      run: cmake --build build --config Release -- -j 2
