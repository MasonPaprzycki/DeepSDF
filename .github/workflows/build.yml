name: DeepSDF Build

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    steps:
    # --------------------
    # Checkout repository
    # --------------------
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: true

    # --------------------
    # macOS setup
    # --------------------
    - name: Setup macOS Python and dependencies
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew update
        brew install glew zlib

        # Create isolated virtual environment
        python3 -m venv venv
        source venv/bin/activate

        # Install required Python packages inside venv
        python -m pip install --upgrade pip setuptools wheel numpy matplotlib tqdm

        # Persist environment so all later steps use venv Python
        echo "PATH=$(pwd)/venv/bin:$PATH" >> $GITHUB_ENV
        echo "PYTHON_EXECUTABLE=$(pwd)/venv/bin/python" >> $GITHUB_ENV

    # --------------------
    # Windows setup
    # --------------------
    - name: Install vcpkg and GLEW on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        .\bootstrap-vcpkg.bat
        .\vcpkg install glew:x64-windows

        # Persist toolchain for later CMake configure
        echo "CMAKE_TOOLCHAIN_FILE=${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake" >> $env:GITHUB_ENV

    - name: Ensure Windows Python packages
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        python -m pip install --upgrade pip setuptools wheel numpy matplotlib tqdm
        echo "PYTHON_EXECUTABLE=$(Get-Command python | Select-Object -ExpandProperty Source)" >> $env:GITHUB_ENV

    # --------------------
    # Set up CMake
    # --------------------
    - name: Set up CMake
      uses: jwlawson/actions-setup-cmake@v1

    # --------------------
    # Configure CMake (macOS)
    # --------------------
    - name: Configure CMake (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        cmake -S . -B build -DCMAKE_BUILD_TYPE=Release \
              -DPYTHON_EXECUTABLE=$PYTHON_EXECUTABLE

    # --------------------
    # Configure CMake (Windows)
    # --------------------
    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $args = "-S . -B build -DCMAKE_BUILD_TYPE=Release"
        if ($env:CMAKE_TOOLCHAIN_FILE) {
          $args = "$args -DCMAKE_TOOLCHAIN_FILE=$env:CMAKE_TOOLCHAIN_FILE"
        }
        if ($env:PYTHON_EXECUTABLE) {
          $args = "$args -DPYTHON_EXECUTABLE=$env:PYTHON_EXECUTABLE"
        }
        cmake $args

    # --------------------
    # Build
    # --------------------
    - name: Build
      shell: bash
      run: cmake --build build --config Release -- -j 2
